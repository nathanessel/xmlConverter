package converter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;

public class XMLPartsCreator {
    protected DocumentBuilderFactory domFactory = null;
    protected DocumentBuilder domBuilder = null;

    Map<String, Part> partsMap = new HashMap<String,Part>();
    
    public XMLPartsCreator() {
        try {
            domFactory = DocumentBuilderFactory.newInstance();
            domBuilder = domFactory.newDocumentBuilder();
        } catch (FactoryConfigurationError exp) {
            System.err.println(exp.toString());
        } catch (ParserConfigurationException exp) {
            System.err.println(exp.toString());
        } catch (Exception exp) {
            System.err.println(exp.toString());
        }

    }

    public int convertFile(String txtFileName, String xmlFileName, char delimiter) 
    {
        int rowsCount = -1;
        try {
            Document newDoc = domBuilder.newDocument();
            // Root element
            Element partsElement = newDoc.createElement("Parts");
            newDoc.appendChild(partsElement);

            //** Now using the OpenCSV **//
            CSVParser parser = new CSVParserBuilder().withSeparator(delimiter).build();
        	
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(txtFileName), "utf-8"));
            
            CSVReader reader = new CSVReaderBuilder(br).withCSVParser(parser).build();

            List<String> partNumberList = new ArrayList<String>();
            
//        	Element componentHandlingElement = null;
//        	Element manufacturerPartsElement = null;
//        	Element manufacturerPartElement = null;
//        	Element vendorPartsElement = null;
//        	Element vendorPartElement = null;
//        	Element customerPartsElement = null;
//        	Element customerPartElement = null;
//        	Element alternatePartsElement = null;
//        	Element alternatePartElement = null;
//        	Element customFieldsElement = null;
//        	Element entryElement = null;
//        	Element electronicPartElement = null;
//        	Element machineSpecificAttributesElement = null;
//        	Element machineElement = null;

            String[] nextLine;
            int line = 0;
            List<String> headers = new ArrayList<String>();
            
            Part part = null;
            
            while ((nextLine = reader.readNext()) != null) 
            {
            	String masterPartNumber = "";
            	
            	boolean addMachineSpecificAttributes = true;
            	boolean addCustomField = true;
            	boolean addAlternatePart = true;
            	boolean addCustomerPart = true;
            	boolean addVendorPart = true;
            	boolean addManufacturerPart = true;
            	
            	boolean partExists = false;

                if (line == 0) 
                { 
                    for (String col : nextLine) 
                    {
                        headers.add(col);
                    }
                } 
                
                else 
                { 
               		masterPartNumber = nextLine[2];
                	
                	part = partsMap.get(masterPartNumber);
                	
                	if (part == null)
                		part = new Part();
                	else
                		partExists = true;
                	
                    int col = 0;
                    for (String value : nextLine) 
                    {
                        String header = headers.get(col);

                        if (value.equalsIgnoreCase("Y"))
                        	value = "true";
                        else if (value.equalsIgnoreCase("N"))
                        	value = "false";
                        
                        if (col < 7 && !partExists)
                        	readCSVToPartData(part.partDataElement, header, value);
                        
                        else if (col == 7 && partExists)
                        	readCSVToPartData(part.customerElement, header, value);
                        
                        else if (col > 7 && col < 12 && !partExists)
                        	readCSVToPartData(part.partDataElement, header, value);
                        
                        else if (col >= 12 && col < 31 && !partExists)
                        	readCSVToPartData(part.componentHandlingElement, header, value);

                        else if (col >= 31 && col < 42 && !partExists)
                        	readCSVToPartData(part.partDataElement, header, value);
                        
                        //ManufacturerPart
                        else if (col >= 42 && col < 47)
                        {
                        	
                        	readCSVToNestedPartData(part.manufacturerPartElement, header, value, partExists, masterPartNumber);
                        	
                        	PartElement currentElement = new PartElement (header,value);
                       		part.manufacturerPartElement.add(currentElement);
                        }
                        
                        //VendorParts
                        else if (col >= 47 && col < 51)
                        {
                        	//System.out.println("VendorPart " + headers.get(col));

                        	PartElement currentElement = new PartElement (header,value);
                        	
                        	if (partExists)
                        		part.vendorPartElement.add(currentElement);
                        	else
                        		part.vendorPartElement.add(currentElement);

                        	
//                        	if ((header.equalsIgnoreCase("PartNumber") && value.isEmpty()) 
//                        			|| (header.equalsIgnoreCase("VendorName") && value.isEmpty()) && line != 0)
//                        	{
//                        		addVendorPart = false;
//                        	}
//                        	
//                        	if (col == 47)
//                        	{
//                        		vendorPartsElement = newDoc.createElement("VendorParts");
//                        		vendorPartElement = newDoc.createElement("VendorPart");
//                        	}
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	vendorPartElement.appendChild(currentElement);
//                            
//                        	if (col == 50)
//                        	{
//                        		vendorPartsElement.appendChild(vendorPartElement);
//                        		
//                        		if (addVendorPart)
//                        			partDataElement.appendChild(vendorPartsElement);
//                        	}
                        }
                        
                        //CustomerParts
                        else if (col >= 51 && col < 55)
                        {
                        	//System.out.println("CustomerPart " + headers.get(col));

                        	PartElement currentElement = new PartElement (header,value);
                        	
                        	if (part != null)
                        		part.customerPartElement.add(currentElement);
                        	else                	
                        		part.customerPartElement.add(currentElement);

                        	
//                        	if ((header.equalsIgnoreCase("PartNumber") && value.isEmpty()) 
//                        			|| (header.equalsIgnoreCase("CustomerName") && value.isEmpty()) && line != 0)
//                        	{
//                        		addCustomerPart = false;
//                        	}
//                        	
//                        	if (col == 51)
//                        	{
//                        		customerPartsElement = newDoc.createElement("CustomerParts");
//                        		customerPartElement = newDoc.createElement("CustomerPart");
//                        	}
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	customerPartElement.appendChild(currentElement);
//                            
//                        	if (col == 54)
//                        	{
//                        		customerPartsElement.appendChild(customerPartElement);
//                        		
//                        		if (addCustomerPart)
//                        			partDataElement.appendChild(customerPartsElement);
//                        	}
                        }
                        
                        //AlternateParts
                        else if (col >= 55 && col < 57)
                        {
                        	//System.out.println("AlternatePart " + headers.get(col));

                        	PartElement currentElement = new PartElement (header,value);
                        	
                        	if (part != null)
                        		part.alternatePartElement.add(currentElement);
                        	else

                        	
                        	part.alternatePartElement.add(currentElement);
                        	
//                        	if (header.equalsIgnoreCase("PartNumber") && value.isEmpty() && line != 0)
//                        	{
//                        		addAlternatePart = false;
//                        	}
//                        	
//                        	if (col == 55)
//                        	{
//                        		alternatePartsElement = newDoc.createElement("AlternateParts");
//                        		alternatePartElement = newDoc.createElement("AlternatePart");
//                        	}
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	alternatePartElement.appendChild(currentElement);
//                            
//                        	if (col == 56)
//                        	{
//                        		alternatePartsElement.appendChild(alternatePartElement);
//                        		
//                        		if (addAlternatePart)
//                        			partDataElement.appendChild(alternatePartsElement);
//                        	}
                        }
                        
                        //CustomFields
                        else if (col >= 57 && col < 59)
                        {
                        	//System.out.println("CustomFields " + headers.get(col));
                        	
                        	PartElement currentElement = new PartElement (header,value);
                        	
                        	if (part != null)
                        		part.customFieldsElement.add(currentElement);

                        	
                        	else part.customFieldsElement.add(currentElement);

                        	
//                        	if (header.equalsIgnoreCase("Name") && value.isEmpty() && line != 0)
//                        	{
//                        		addCustomField = false;
//                        	}
//                        	
//                        	if (col == 57)
//                        	{
//                        		customFieldsElement = newDoc.createElement("CustomFields");
//                        		entryElement = newDoc.createElement("Entry");
//                        	}
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	entryElement.appendChild(currentElement);
//                            
//                        	if (col == 58)
//                        	{
//                        		customFieldsElement.appendChild(entryElement);
//                        		
//                        		if (addCustomField)
//                        			partDataElement.appendChild(customFieldsElement);
//                        	}

                        }
                        
                        //ElectronicPart
                        else if (col >= 59 && col < 69)
                        {
                        	//System.out.println("ElectronicPart " + headers.get(col));
                        	
                        	if (part == null)
                        	{
                        		PartElement currentElement = new PartElement (header,value);
                        		part.electronicPartElement.add(currentElement);
                        	}
                        	
//                        	if (col == 59)
//                        		electronicPartElement = newDoc.createElement("ElectronicPart");
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	electronicPartElement.appendChild(currentElement);
//                        	
//                        	if (col == 68)
//                        		partDataElement.appendChild(electronicPartElement);

                        }
                        
                        //MachineSpecificAttributes
                        else if (col >= 69 && col < 74)
                        {
                        	//System.out.println("MachineSpecificAttributes " + headers.get(col));

                        	PartElement currentElement = new PartElement (header,value);
                        	
                        	if (part != null)
                        		part.machineElement.add(currentElement);
                        	else
                        	
                        	part.machineElement.add(currentElement);

                        	
//                        	if (header.equalsIgnoreCase("MachineType") && value.isEmpty() && line != 0)
//                        	{
//                        		addMachineSpecificAttributes = false;
//                        	}
//                        	
//                        	if (col == 69)
//                        	{
//                        		machineSpecificAttributesElement = newDoc.createElement("MachineSpecificAttributes");
//                        		machineElement = newDoc.createElement("Machine");
//                        	}
//                        	
//                        	Element currentElement = newDoc.createElement(header);
//                        	currentElement.appendChild(newDoc.createTextNode(value.trim()));
//                        	machineElement.appendChild(currentElement);
//                            
//                        	if (col == 73)
//                        	{
//                        		machineSpecificAttributesElement.appendChild(machineElement);
//                        		
//                        		if (addMachineSpecificAttributes)
//                        			partDataElement.appendChild(machineSpecificAttributesElement);
//                        	}
                        }
                        
                        // System.out.println("col " + col);
                        col++;
                    }
                }
                System.out.println("line " + line);

                if (line != 0)
                {
                	if (!partExists)
                		partsMap.put(masterPartNumber, part);
                }
                
                line++;
            }
            
            
            
            for (Map.Entry<String, Part> entry : partsMap.entrySet()) {
                String key = entry.getKey();
                System.out.println("key " + key);
                
                Element partDataElement = newDoc.createElement("PartData");
                partsElement.appendChild(partDataElement);
                
                part = entry.getValue();
                
                		addToPartDataElement(newDoc, partDataElement, part.partDataElement);
                		addToPartDataElement(newDoc, partDataElement, part.customerElement, "Customer");
                		addToPartDataElement(newDoc, partDataElement, part.customerElement, "ComponentHandling");

                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.manufacturerPartElement, part, 
                				"ManufacturerParts", "ManufacturerPart"));
                		
                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.vendorPartElement, part, "VendorParts", "VendorPart"));
                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.customerPartElement, part, "CustomerParts", "CustomerPart"));
                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.alternatePartElement, part, "AlternateParts", "AlternatePart"));
                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.customFieldsElement, part, "CustomFields", "Entry"));
                		
                		addToPartDataElement(newDoc, partDataElement, part.electronicPartElement, "ElectronicPart");
                		
                		partDataElement.appendChild(addNestedPartDataElement(newDoc, partDataElement, part.machineElement, part, 
                				"MachineSpecificAttributes", "Machine"));
            }

            FileWriter writer = null;

            try {

                writer = new FileWriter(new File(xmlFileName));

                TransformerFactory tranFactory = TransformerFactory.newInstance();
                Transformer aTransformer = tranFactory.newTransformer();
                aTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
                aTransformer.setOutputProperty(OutputKeys.METHOD, "xml");
                aTransformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

                Source src = new DOMSource(newDoc);
                Result result = new StreamResult(writer);
                aTransformer.transform(src, result);

                writer.flush();

            } catch (Exception exp) {
                exp.printStackTrace();
            } finally {
                try {
                    writer.close();
                } catch (Exception e) {
                }
            }

            // Output to console for testing
            // Result result = new StreamResult(System.out);

        } catch (IOException exp) {
            System.err.println(exp.toString());
        } catch (Exception exp) {
            System.err.println(exp.toString());
        }
        return rowsCount;
        // "XLM Document has been created" + rowsCount;
    }
    
    public Element addNestedPartDataElement(Document newDoc, Element partDataElement, List<PartElement> elementList, Part part, String parentTag, String childTag) {
    	Element parentElement = newDoc.createElement(parentTag);
		Element childElement = newDoc.createElement(childTag);

    	for (PartElement partElement : elementList)
    	{
        	Element currentElement = newDoc.createElement(partElement.getHeader());
        	currentElement.appendChild(newDoc.createTextNode(partElement.getValue().trim()));
        	
        	System.out.println("appending to child " + childTag + "\r\n");
        	System.out.println("header " + partElement.getHeader() + " value " + partElement.getValue() + "\r\n");
        	
        	childElement.appendChild(currentElement);
    	}
    	parentElement.appendChild(childElement);
    	System.out.println("appending to parent " + parentTag + "\r\n\r\n");

    	
    	return parentElement;
    }
    
    public void addToPartDataElement(Document newDoc, Element partDataElement, List<PartElement> elementList) {
    	for (PartElement partData : elementList)
    	{
            Element currentElement = newDoc.createElement(partData.getHeader());
            currentElement.appendChild(newDoc.createTextNode(partData.getValue().trim()));
            partDataElement.appendChild(currentElement);
    	}
    }
    
    public void addToPartDataElement(Document newDoc, Element partDataElement, List<PartElement> elementList, String tag) {
    	Element componentHandlingElement = newDoc.createElement(tag);
    	
    	for (PartElement componentHandling : elementList)
    	{
        	Element currentElement = newDoc.createElement(componentHandling.getHeader());
        	currentElement.appendChild(newDoc.createTextNode(componentHandling.getValue().trim()));
        	componentHandlingElement.appendChild(currentElement);
            partDataElement.appendChild(componentHandlingElement);
    	}
    }
    
    public void readCSVToPartData(List<PartElement> partElementList, String header, String value) {
		PartElement currentElement = new PartElement(header,value);
		partElementList.add(currentElement);
    }
    
    public void readCSVToNestedPartData(List<PartElement> partElementList, String header, String value, boolean partExists, String masterPartNumber) {
    	PartElement currentElement = new PartElement (header,value);
    	
    	if (partExists)
    		partElementList.add(currentElement);
    	else	
    		partElementList.add(currentElement);
    }
    
    

}